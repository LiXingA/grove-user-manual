{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"d3 = require(\"d3-geo@2\", \"d3-geo-projection@3\")","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"topojson = require(\"topojson-client@3\")","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"world = fetch(\"https://cdn.jsdelivr.net/npm/world-atlas@2/land-50m.json\").then(response => response.json())","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"land = topojson.feature(world, world.objects.land)","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"graticule = d3.geoGraticule10()","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"outline = ({type: \"Sphere\"})","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"function fitWidth(projection) {\n  const [[x0, y0], [x1, y1]] = d3.geoPath(projection.fitWidth(width, outline)).bounds(outline);\n  const dy = Math.ceil(y1 - y0), l = Math.min(Math.ceil(x1 - x0), dy);\n  projection.scale(projection.scale() * (l - 1) / l).precision(0.2);\n  return dy;\n}","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"projections = [\n  {name: \"Airy’s minimum error\", value: d3.geoAiry},\n  {name: \"Aitoff\", value: d3.geoAitoff},\n  {name: \"American polyconic\", value: d3.geoPolyconic},\n  {name: \"armadillo\", value: d3.geoArmadillo},\n  {name: \"August\", value: d3.geoAugust},\n  {name: \"azimuthal equal-area\", value: d3.geoAzimuthalEqualArea},\n  {name: \"azimuthal equidistant\", value: d3.geoAzimuthalEquidistant},\n  {name: \"Baker dinomic\", value: d3.geoBaker},\n  {name: \"Berghaus’ star\", value: d3.geoBerghaus},\n  {name: \"Bertin’s 1953\", value: d3.geoBertin1953},\n  {name: \"Boggs’ eumorphic\", value: d3.geoBoggs},\n  {name: \"Boggs’ eumorphic (interrupted)\", value: d3.geoInterruptedBoggs},\n  {name: \"Bonne\", value: d3.geoBonne},\n  {name: \"Bottomley\", value: d3.geoBottomley},\n  {name: \"Bromley\", value: d3.geoBromley},\n  {name: \"Butterfly (gnomonic)\", value: d3.geoPolyhedralButterfly},\n  {name: \"Butterfly (Collignon)\", value: d3.geoPolyhedralCollignon},\n  {name: \"Butterfly (Waterman)\", value: d3.geoPolyhedralWaterman},\n  {name: \"Collignon\", value: d3.geoCollignon},\n  // {name: \"conic conformal\", value: d3.geoConicConformal}, // Not suitable for world maps.\n  {name: \"conic equal-area\", value: d3.geoConicEqualArea},\n  {name: \"conic equidistant\", value: d3.geoConicEquidistant},\n  {name: \"Craig retroazimuthal\", value: d3.geoCraig},\n  {name: \"Craster parabolic\", value: d3.geoCraster},\n  {name: \"cylindrical equal-area\", value: d3.geoCylindricalEqualArea},\n  {name: \"cylindrical stereographic\", value: d3.geoCylindricalStereographic},\n  {name: \"Eckert I\", value: d3.geoEckert1},\n  {name: \"Eckert II\", value: d3.geoEckert2},\n  {name: \"Eckert III\", value: d3.geoEckert3},\n  {name: \"Eckert IV\", value: d3.geoEckert4},\n  {name: \"Eckert V\", value: d3.geoEckert5},\n  {name: \"Eckert VI\", value: d3.geoEckert6},\n  {name: \"Eisenlohr conformal\", value: d3.geoEisenlohr},\n  {name: \"Equal Earth\", value: d3.geoEqualEarth},\n  {name: \"Equirectangular (plate carrée)\", value: d3.geoEquirectangular},\n  {name: \"Fahey pseudocylindrical\", value: d3.geoFahey},\n  {name: \"flat-polar parabolic\", value: d3.geoMtFlatPolarParabolic},\n  {name: \"flat-polar quartic\", value: d3.geoMtFlatPolarQuartic},\n  {name: \"flat-polar sinusoidal\", value: d3.geoMtFlatPolarSinusoidal},\n  {name: \"Foucaut’s stereographic equivalent\", value: d3.geoFoucaut},\n  {name: \"Foucaut’s sinusoidal\", value: d3.geoFoucautSinusoidal},\n  {name: \"general perspective\", value: d3.geoSatellite},\n  {name: \"Gilbert’s two-world\", value: d3.geoGilbert},\n  {name: \"Gingery\", value: d3.geoGingery},\n  {name: \"Ginzburg V\", value: d3.geoGinzburg5},\n  {name: \"Ginzburg VI\", value: d3.geoGinzburg6},\n  {name: \"Ginzburg VIII\", value: d3.geoGinzburg8},\n  {name: \"Ginzburg IX\", value: d3.geoGinzburg9},\n  {name: \"Goode’s homolosine\", value: d3.geoHomolosine},\n  {name: \"Goode’s homolosine (interrupted)\", value: d3.geoInterruptedHomolosine},\n  {name: \"gnomonic\", value: d3.geoGnomonic},\n  {name: \"Gringorten square\", value: d3.geoGringorten},\n  {name: \"Gringorten quincuncial\", value: d3.geoGringortenQuincuncial},\n  {name: \"Guyou square\", value: d3.geoGuyou},\n  {name: \"Hammer\", value: d3.geoHammer},\n  {name: \"Hammer retroazimuthal\", value: d3.geoHammerRetroazimuthal},\n  {name: \"HEALPix\", value: d3.geoHealpix},\n  {name: \"Hill eucyclic\", value: d3.geoHill},\n  {name: \"Hufnagel pseudocylindrical\", value: d3.geoHufnagel},\n  {name: \"Kavrayskiy VII\", value: d3.geoKavrayskiy7},\n  {name: \"Lagrange conformal\", value: d3.geoLagrange},\n  {name: \"Larrivée\", value: d3.geoLarrivee},\n  {name: \"Laskowski tri-optimal\", value: d3.geoLaskowski},\n  // {name: \"Littrow retroazimuthal\", value: d3.geoLittrow}, // Not suitable for world maps.\n  {name: \"Loximuthal\", value: d3.geoLoximuthal},\n  {name: \"Mercator\", value: d3.geoMercator},\n  {name: \"Miller cylindrical\", value: d3.geoMiller},\n  {name: \"Mollweide\", value: d3.geoMollweide},\n  {name: \"Mollweide (Goode’s interrupted)\", value: d3.geoInterruptedMollweide},\n  {name: \"Mollweide (interrupted hemispheres)\", value: d3.geoInterruptedMollweideHemispheres},\n  {name: \"Natural Earth\", value: d3.geoNaturalEarth1},\n  {name: \"Natural Earth II\", value: d3.geoNaturalEarth2},\n  {name: \"Nell–Hammer\", value: d3.geoNellHammer},\n  {name: \"Nicolosi globular\", value: d3.geoNicolosi},\n  {name: \"orthographic\", value: d3.geoOrthographic},\n  {name: \"Patterson cylindrical\", value: d3.geoPatterson},\n  {name: \"Peirce quincuncial\", value: d3.geoPeirceQuincuncial},\n  {name: \"rectangular polyconic\", value: d3.geoRectangularPolyconic},\n  {name: \"Robinson\", value: d3.geoRobinson},\n  {name: \"sinusoidal\", value: d3.geoSinusoidal},\n  {name: \"sinusoidal (interrupted)\", value: d3.geoInterruptedSinusoidal},\n  {name: \"sinu-Mollweide\", value: d3.geoSinuMollweide},\n  {name: \"sinu-Mollweide (interrupted)\", value: d3.geoInterruptedSinuMollweide},\n  {name: \"stereographic\", value: d3.geoStereographic},\n  {name: \"Times\", value: d3.geoTimes},\n  {name: \"Tobler hyperelliptical\", value: d3.geoHyperelliptical},\n  {name: \"transverse Mercator\", value: d3.geoTransverseMercator},\n  {name: \"Van der Grinten\", value: d3.geoVanDerGrinten},\n  {name: \"Van der Grinten II\", value: d3.geoVanDerGrinten2},\n  {name: \"Van der Grinten III\", value: d3.geoVanDerGrinten3},\n  {name: \"Van der Grinten IV\", value: d3.geoVanDerGrinten4},\n  {name: \"Wagner IV\", value: d3.geoWagner4},\n  {name: \"Wagner VI\", value: d3.geoWagner6},\n  {name: \"Wagner VII\", value: d3.geoWagner7},\n  {name: \"Werner\", value: () => d3.geoBonne().parallel(90)},\n  {name: \"Wiechel\", value: d3.geoWiechel},\n  {name: \"Winkel tripel\", value: d3.geoWinkel3}\n]","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof red = projectionInput({\n  name: \"red\",\n  value: new URLSearchParams(location.search).get(\"red\") || \"American polyconic\"\n})","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"viewof blue = projectionInput({\n  name: \"blue\",\n  value: new URLSearchParams(location.search).get(\"blue\") || \"rectangular polyconic\"\n})","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"heightBlue = fitWidth(blue)","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"heightRed = fitWidth(red)","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"function projectionInput({name = \"\", value} = {}) {\n  const form = html`<form><select name=i>${projections.map(p => {\n    return Object.assign(html`<option>`, {\n      textContent: p.name,\n      selected: p.name === value\n    });\n  })}</select> <i style=\"font-size:smaller;\">${name}</i>`;\n  form.onchange = () => form.dispatchEvent(new CustomEvent(\"input\"));\n  form.oninput = () => form.value = projections[form.i.selectedIndex].value();\n  form.oninput();\n  return form;\n}","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"map = {\n  const height = Math.max(heightRed, heightBlue);\n  const context = DOM.context2d(width, height);\n\n  function render(projection, color) {\n    const path = d3.geoPath(projection, context);\n    context.fillStyle = context.strokeStyle = color;\n    context.save();\n    context.beginPath(), path(outline), context.clip();\n    context.beginPath(), path(graticule), context.globalAlpha = 0.3, context.stroke();\n    context.beginPath(), path(land), context.globalAlpha = 1.0, context.fill();\n    context.restore();\n    context.beginPath(), path(outline), context.stroke();\n  }\n\n  context.fillStyle = \"#fff\";\n  context.fillRect(0, 0, width, height);\n\n  context.save();\n  context.translate(0, (height - heightRed) / 2);\n  render(red, \"#f00\");\n  context.restore();\n\n  context.save();\n  context.globalCompositeOperation = \"multiply\";\n  context.translate(0, (height - heightBlue) / 2);\n  render(blue, \"#00f\");\n  context.restore();\n\n  return context.canvas;\n}","pinCode":false}}}],"version":"2.19.1"}