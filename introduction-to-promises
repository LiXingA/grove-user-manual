{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Introduction to Promises\n\nA promise represents a value that is not yet known, but that *will* be known in the future. For example, when you load a file from a web server into a browser, the file’s contents aren’t available right away: the file must first be transferred over the network. Rather than locking up while the file is downloading, browsers download asynchronously.\n\nThis asynchronous design, essential for fluid interaction and parallel downloads, introduces complexity: code that depends on promised values must wait until the values are resolved rather than running immediately. Fortunately, JavaScript’s [Promise API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises) (and its companion \\`await\\` operator), make it easier to work with asynchronous values.\n\nPromises are often not created by you. Instead, an asynchronous library method might return a promise, and you need to wait for the promise to resolve (or reject). D3’s [d3.csv](https://github.com/d3/d3-fetch/blob/master/README.md#csv) is just such a function: it [fetches](https://fetch.spec.whatwg.org/) a file from another server, parsing [comma-separated values](https://en.wikipedia.org/wiki/Comma-separated_values) into a structured array of objects. d3.csv can’t return the array right away, so it instead returns a Promise.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"data = d3.csv(\"https://gist.githubusercontent.com/mbostock/ddc6d50c313ebe6edb45519f43358c6c/raw/c443ed14c34c5c1b544949a546dd9d0acd05bad3/temperatures.csv\")","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"md`Did you see the promise? Observable implicitly awaits promises across cell boundaries, so you often don’t need to deal with a promise directly. Cells can return promises, and other cells can simply refer to the values and they’ll run when the promise resolves.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"data.map(d => +d.Year)","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"md`Observable’s standard library has few built-in methods related to Promises.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Promises","pinCode":true}}},{"type":"codeTool","data":{"codeData":{"value":"md`Promises.delay returns a promise that resolves to a given value after a given duration. The promise below resolves to a greeting after three seconds.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Promise","pinCode":true}}}],"version":"2.19.1"}